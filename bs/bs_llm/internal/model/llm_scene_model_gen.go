// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	llmSceneFieldNames          = builder.RawFieldNames(&LlmScene{})
	llmSceneRows                = strings.Join(llmSceneFieldNames, ",")
	llmSceneRowsExpectAutoSet   = strings.Join(stringx.Remove(llmSceneFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	llmSceneRowsWithPlaceHolder = strings.Join(stringx.Remove(llmSceneFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	llmSceneModel interface {
		Insert(ctx context.Context, data *LlmScene) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LlmScene, error)
		FindOneBySceneCode(ctx context.Context, sceneCode string) (*LlmScene, error)
		Update(ctx context.Context, data *LlmScene) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLlmSceneModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LlmScene struct {
		Id               int64          `db:"id"`
		SceneCode        string         `db:"scene_code"`
		SceneName        string         `db:"scene_name"`
		ProviderCode     string         `db:"provider_code"`
		ProviderName     string         `db:"provider_name"`
		ModelCode        string         `db:"model_code"`
		ModelName        string         `db:"model_name"`
		ModelDescription sql.NullString `db:"model_description"`
		SceneDescription sql.NullString `db:"scene_description"`
		Temperature      float64        `db:"temperature"`
		MaxTokens        int64          `db:"max_tokens"`
		EnableStream     int64          `db:"enable_stream"`
		Deleted          int64          `db:"deleted"`
		CreatedAt        time.Time      `db:"created_at"`
		UpdatedAt        time.Time      `db:"updated_at"`
	}
)

func newLlmSceneModel(conn sqlx.SqlConn) *defaultLlmSceneModel {
	return &defaultLlmSceneModel{
		conn:  conn,
		table: "`llm_scene`",
	}
}

func (m *defaultLlmSceneModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLlmSceneModel) FindOne(ctx context.Context, id int64) (*LlmScene, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", llmSceneRows, m.table)
	var resp LlmScene
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLlmSceneModel) FindOneBySceneCode(ctx context.Context, sceneCode string) (*LlmScene, error) {
	var resp LlmScene
	query := fmt.Sprintf("select %s from %s where `scene_code` = ? limit 1", llmSceneRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, sceneCode)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLlmSceneModel) Insert(ctx context.Context, data *LlmScene) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, llmSceneRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SceneCode, data.SceneName, data.ProviderCode, data.ProviderName, data.ModelCode, data.ModelName, data.ModelDescription, data.SceneDescription, data.Temperature, data.MaxTokens, data.EnableStream, data.Deleted)
	return ret, err
}

func (m *defaultLlmSceneModel) Update(ctx context.Context, newData *LlmScene) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, llmSceneRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.SceneCode, newData.SceneName, newData.ProviderCode, newData.ProviderName, newData.ModelCode, newData.ModelName, newData.ModelDescription, newData.SceneDescription, newData.Temperature, newData.MaxTokens, newData.EnableStream, newData.Deleted, newData.Id)
	return err
}

func (m *defaultLlmSceneModel) tableName() string {
	return m.table
}
