// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	llmCompletionFieldNames          = builder.RawFieldNames(&LlmCompletion{})
	llmCompletionRows                = strings.Join(llmCompletionFieldNames, ",")
	llmCompletionRowsExpectAutoSet   = strings.Join(stringx.Remove(llmCompletionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	llmCompletionRowsWithPlaceHolder = strings.Join(stringx.Remove(llmCompletionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	llmCompletionModel interface {
		Insert(ctx context.Context, data *LlmCompletion) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LlmCompletion, error)
		Update(ctx context.Context, data *LlmCompletion) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLlmCompletionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LlmCompletion struct {
		Id           int64           `db:"id"`
		SceneCode    string          `db:"scene_code"`
		Prompt       string          `db:"prompt"`
		Completion   sql.NullString  `db:"completion"`
		InputTokens  int64           `db:"input_tokens"`
		OutputTokens int64           `db:"output_tokens"`
		TotalTokens  int64           `db:"total_tokens"`
		ModelCode    string          `db:"model_code"`
		ProviderCode string          `db:"provider_code"`
		RequestId    string          `db:"request_id"`
		Status       int64           `db:"status"`
		ErrorMsg     sql.NullString  `db:"error_msg"`
		ResponseTime sql.NullFloat64 `db:"response_time"`
		UserId       string          `db:"user_id"`
		CreatedAt    time.Time       `db:"created_at"`
	}
)

func newLlmCompletionModel(conn sqlx.SqlConn) *defaultLlmCompletionModel {
	return &defaultLlmCompletionModel{
		conn:  conn,
		table: "`llm_completion`",
	}
}

func (m *defaultLlmCompletionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLlmCompletionModel) FindOne(ctx context.Context, id int64) (*LlmCompletion, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", llmCompletionRows, m.table)
	var resp LlmCompletion
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLlmCompletionModel) Insert(ctx context.Context, data *LlmCompletion) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, llmCompletionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SceneCode, data.Prompt, data.Completion, data.InputTokens, data.OutputTokens, data.TotalTokens, data.ModelCode, data.ProviderCode, data.RequestId, data.Status, data.ErrorMsg, data.ResponseTime, data.UserId)
	return ret, err
}

func (m *defaultLlmCompletionModel) Update(ctx context.Context, data *LlmCompletion) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, llmCompletionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SceneCode, data.Prompt, data.Completion, data.InputTokens, data.OutputTokens, data.TotalTokens, data.ModelCode, data.ProviderCode, data.RequestId, data.Status, data.ErrorMsg, data.ResponseTime, data.UserId, data.Id)
	return err
}

func (m *defaultLlmCompletionModel) tableName() string {
	return m.table
}
