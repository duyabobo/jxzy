// Code generated by goctl. DO NOT EDIT.
// Source: bsllm.proto

package bsllmservice

import (
	"context"

	"jxzy/bs/bs_llm/bs_llm"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ChatMessage       = bs_llm.ChatMessage
	LLMRequest        = bs_llm.LLMRequest
	LLMResponse       = bs_llm.LLMResponse
	LLMUsage          = bs_llm.LLMUsage
	StreamLLMResponse = bs_llm.StreamLLMResponse

	BsLlmService interface {
		// 流式LLM调用
		StreamLLM(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (bs_llm.BsLlmService_StreamLLMClient, error)
		// 非流式LLM调用
		LLM(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (*LLMResponse, error)
	}

	defaultBsLlmService struct {
		cli zrpc.Client
	}
)

func NewBsLlmService(cli zrpc.Client) BsLlmService {
	return &defaultBsLlmService{
		cli: cli,
	}
}

// 流式LLM调用
func (m *defaultBsLlmService) StreamLLM(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (bs_llm.BsLlmService_StreamLLMClient, error) {
	client := bs_llm.NewBsLlmServiceClient(m.cli.Conn())
	return client.StreamLLM(ctx, in, opts...)
}

// 非流式LLM调用
func (m *defaultBsLlmService) LLM(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (*LLMResponse, error) {
	client := bs_llm.NewBsLlmServiceClient(m.cli.Conn())
	return client.LLM(ctx, in, opts...)
}
