// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bs_llm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BsLlmServiceClient is the client API for BsLlmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BsLlmServiceClient interface {
	// 流式LLM调用
	StreamLLM(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (BsLlmService_StreamLLMClient, error)
	// 非流式LLM调用
	LLM(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (*LLMResponse, error)
}

type bsLlmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBsLlmServiceClient(cc grpc.ClientConnInterface) BsLlmServiceClient {
	return &bsLlmServiceClient{cc}
}

func (c *bsLlmServiceClient) StreamLLM(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (BsLlmService_StreamLLMClient, error) {
	stream, err := c.cc.NewStream(ctx, &BsLlmService_ServiceDesc.Streams[0], "/bs_llm.BsLlmService/StreamLLM", opts...)
	if err != nil {
		return nil, err
	}
	x := &bsLlmServiceStreamLLMClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BsLlmService_StreamLLMClient interface {
	Recv() (*StreamLLMResponse, error)
	grpc.ClientStream
}

type bsLlmServiceStreamLLMClient struct {
	grpc.ClientStream
}

func (x *bsLlmServiceStreamLLMClient) Recv() (*StreamLLMResponse, error) {
	m := new(StreamLLMResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bsLlmServiceClient) LLM(ctx context.Context, in *LLMRequest, opts ...grpc.CallOption) (*LLMResponse, error) {
	out := new(LLMResponse)
	err := c.cc.Invoke(ctx, "/bs_llm.BsLlmService/LLM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BsLlmServiceServer is the server API for BsLlmService service.
// All implementations must embed UnimplementedBsLlmServiceServer
// for forward compatibility
type BsLlmServiceServer interface {
	// 流式LLM调用
	StreamLLM(*LLMRequest, BsLlmService_StreamLLMServer) error
	// 非流式LLM调用
	LLM(context.Context, *LLMRequest) (*LLMResponse, error)
	mustEmbedUnimplementedBsLlmServiceServer()
}

// UnimplementedBsLlmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBsLlmServiceServer struct {
}

func (UnimplementedBsLlmServiceServer) StreamLLM(*LLMRequest, BsLlmService_StreamLLMServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLLM not implemented")
}
func (UnimplementedBsLlmServiceServer) LLM(context.Context, *LLMRequest) (*LLMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LLM not implemented")
}
func (UnimplementedBsLlmServiceServer) mustEmbedUnimplementedBsLlmServiceServer() {}

// UnsafeBsLlmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BsLlmServiceServer will
// result in compilation errors.
type UnsafeBsLlmServiceServer interface {
	mustEmbedUnimplementedBsLlmServiceServer()
}

func RegisterBsLlmServiceServer(s grpc.ServiceRegistrar, srv BsLlmServiceServer) {
	s.RegisterService(&BsLlmService_ServiceDesc, srv)
}

func _BsLlmService_StreamLLM_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LLMRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BsLlmServiceServer).StreamLLM(m, &bsLlmServiceStreamLLMServer{stream})
}

type BsLlmService_StreamLLMServer interface {
	Send(*StreamLLMResponse) error
	grpc.ServerStream
}

type bsLlmServiceStreamLLMServer struct {
	grpc.ServerStream
}

func (x *bsLlmServiceStreamLLMServer) Send(m *StreamLLMResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BsLlmService_LLM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LLMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BsLlmServiceServer).LLM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bs_llm.BsLlmService/LLM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BsLlmServiceServer).LLM(ctx, req.(*LLMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BsLlmService_ServiceDesc is the grpc.ServiceDesc for BsLlmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BsLlmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bs_llm.BsLlmService",
	HandlerType: (*BsLlmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LLM",
			Handler:    _BsLlmService_LLM_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLLM",
			Handler:       _BsLlmService_StreamLLM_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bsllm.proto",
}
