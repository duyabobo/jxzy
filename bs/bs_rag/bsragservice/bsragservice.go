// Code generated by goctl. DO NOT EDIT.
// Source: bsrag.proto

package bsragservice

import (
	"context"

	"jxzy/bs/bs_rag/bs_rag"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CollectionInfoRequest  = bs_rag.CollectionInfoRequest
	CollectionInfoResponse = bs_rag.CollectionInfoResponse
	VectorDeleteRequest    = bs_rag.VectorDeleteRequest
	VectorDeleteResponse   = bs_rag.VectorDeleteResponse
	VectorDocument         = bs_rag.VectorDocument
	VectorInsertRequest    = bs_rag.VectorInsertRequest
	VectorInsertResponse   = bs_rag.VectorInsertResponse
	VectorSearchRequest    = bs_rag.VectorSearchRequest
	VectorSearchResponse   = bs_rag.VectorSearchResponse
	VectorSearchResult     = bs_rag.VectorSearchResult

	BsRagService interface {
		// 向量相似度搜索
		VectorSearch(ctx context.Context, in *VectorSearchRequest, opts ...grpc.CallOption) (*VectorSearchResponse, error)
		// 插入向量文档
		VectorInsert(ctx context.Context, in *VectorInsertRequest, opts ...grpc.CallOption) (*VectorInsertResponse, error)
		// 删除向量文档
		VectorDelete(ctx context.Context, in *VectorDeleteRequest, opts ...grpc.CallOption) (*VectorDeleteResponse, error)
		// 获取集合信息
		GetCollectionInfo(ctx context.Context, in *CollectionInfoRequest, opts ...grpc.CallOption) (*CollectionInfoResponse, error)
	}

	defaultBsRagService struct {
		cli zrpc.Client
	}
)

func NewBsRagService(cli zrpc.Client) BsRagService {
	return &defaultBsRagService{
		cli: cli,
	}
}

// 向量相似度搜索
func (m *defaultBsRagService) VectorSearch(ctx context.Context, in *VectorSearchRequest, opts ...grpc.CallOption) (*VectorSearchResponse, error) {
	client := bs_rag.NewBsRagServiceClient(m.cli.Conn())
	return client.VectorSearch(ctx, in, opts...)
}

// 插入向量文档
func (m *defaultBsRagService) VectorInsert(ctx context.Context, in *VectorInsertRequest, opts ...grpc.CallOption) (*VectorInsertResponse, error) {
	client := bs_rag.NewBsRagServiceClient(m.cli.Conn())
	return client.VectorInsert(ctx, in, opts...)
}

// 删除向量文档
func (m *defaultBsRagService) VectorDelete(ctx context.Context, in *VectorDeleteRequest, opts ...grpc.CallOption) (*VectorDeleteResponse, error) {
	client := bs_rag.NewBsRagServiceClient(m.cli.Conn())
	return client.VectorDelete(ctx, in, opts...)
}

// 获取集合信息
func (m *defaultBsRagService) GetCollectionInfo(ctx context.Context, in *CollectionInfoRequest, opts ...grpc.CallOption) (*CollectionInfoResponse, error) {
	client := bs_rag.NewBsRagServiceClient(m.cli.Conn())
	return client.GetCollectionInfo(ctx, in, opts...)
}
