// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bs_rag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BsRagServiceClient is the client API for BsRagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BsRagServiceClient interface {
	// 向量相似度搜索
	VectorSearch(ctx context.Context, in *VectorSearchRequest, opts ...grpc.CallOption) (*VectorSearchResponse, error)
	// 插入向量文档
	VectorInsert(ctx context.Context, in *VectorInsertRequest, opts ...grpc.CallOption) (*VectorInsertResponse, error)
	// 删除向量文档
	VectorDelete(ctx context.Context, in *VectorDeleteRequest, opts ...grpc.CallOption) (*VectorDeleteResponse, error)
	// 获取集合信息
	GetCollectionInfo(ctx context.Context, in *CollectionInfoRequest, opts ...grpc.CallOption) (*CollectionInfoResponse, error)
}

type bsRagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBsRagServiceClient(cc grpc.ClientConnInterface) BsRagServiceClient {
	return &bsRagServiceClient{cc}
}

func (c *bsRagServiceClient) VectorSearch(ctx context.Context, in *VectorSearchRequest, opts ...grpc.CallOption) (*VectorSearchResponse, error) {
	out := new(VectorSearchResponse)
	err := c.cc.Invoke(ctx, "/bs_rag.BsRagService/VectorSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bsRagServiceClient) VectorInsert(ctx context.Context, in *VectorInsertRequest, opts ...grpc.CallOption) (*VectorInsertResponse, error) {
	out := new(VectorInsertResponse)
	err := c.cc.Invoke(ctx, "/bs_rag.BsRagService/VectorInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bsRagServiceClient) VectorDelete(ctx context.Context, in *VectorDeleteRequest, opts ...grpc.CallOption) (*VectorDeleteResponse, error) {
	out := new(VectorDeleteResponse)
	err := c.cc.Invoke(ctx, "/bs_rag.BsRagService/VectorDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bsRagServiceClient) GetCollectionInfo(ctx context.Context, in *CollectionInfoRequest, opts ...grpc.CallOption) (*CollectionInfoResponse, error) {
	out := new(CollectionInfoResponse)
	err := c.cc.Invoke(ctx, "/bs_rag.BsRagService/GetCollectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BsRagServiceServer is the server API for BsRagService service.
// All implementations must embed UnimplementedBsRagServiceServer
// for forward compatibility
type BsRagServiceServer interface {
	// 向量相似度搜索
	VectorSearch(context.Context, *VectorSearchRequest) (*VectorSearchResponse, error)
	// 插入向量文档
	VectorInsert(context.Context, *VectorInsertRequest) (*VectorInsertResponse, error)
	// 删除向量文档
	VectorDelete(context.Context, *VectorDeleteRequest) (*VectorDeleteResponse, error)
	// 获取集合信息
	GetCollectionInfo(context.Context, *CollectionInfoRequest) (*CollectionInfoResponse, error)
	mustEmbedUnimplementedBsRagServiceServer()
}

// UnimplementedBsRagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBsRagServiceServer struct {
}

func (UnimplementedBsRagServiceServer) VectorSearch(context.Context, *VectorSearchRequest) (*VectorSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VectorSearch not implemented")
}
func (UnimplementedBsRagServiceServer) VectorInsert(context.Context, *VectorInsertRequest) (*VectorInsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VectorInsert not implemented")
}
func (UnimplementedBsRagServiceServer) VectorDelete(context.Context, *VectorDeleteRequest) (*VectorDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VectorDelete not implemented")
}
func (UnimplementedBsRagServiceServer) GetCollectionInfo(context.Context, *CollectionInfoRequest) (*CollectionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionInfo not implemented")
}
func (UnimplementedBsRagServiceServer) mustEmbedUnimplementedBsRagServiceServer() {}

// UnsafeBsRagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BsRagServiceServer will
// result in compilation errors.
type UnsafeBsRagServiceServer interface {
	mustEmbedUnimplementedBsRagServiceServer()
}

func RegisterBsRagServiceServer(s grpc.ServiceRegistrar, srv BsRagServiceServer) {
	s.RegisterService(&BsRagService_ServiceDesc, srv)
}

func _BsRagService_VectorSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BsRagServiceServer).VectorSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bs_rag.BsRagService/VectorSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BsRagServiceServer).VectorSearch(ctx, req.(*VectorSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BsRagService_VectorInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BsRagServiceServer).VectorInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bs_rag.BsRagService/VectorInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BsRagServiceServer).VectorInsert(ctx, req.(*VectorInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BsRagService_VectorDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BsRagServiceServer).VectorDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bs_rag.BsRagService/VectorDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BsRagServiceServer).VectorDelete(ctx, req.(*VectorDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BsRagService_GetCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BsRagServiceServer).GetCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bs_rag.BsRagService/GetCollectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BsRagServiceServer).GetCollectionInfo(ctx, req.(*CollectionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BsRagService_ServiceDesc is the grpc.ServiceDesc for BsRagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BsRagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bs_rag.BsRagService",
	HandlerType: (*BsRagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VectorSearch",
			Handler:    _BsRagService_VectorSearch_Handler,
		},
		{
			MethodName: "VectorInsert",
			Handler:    _BsRagService_VectorInsert_Handler,
		},
		{
			MethodName: "VectorDelete",
			Handler:    _BsRagService_VectorDelete_Handler,
		},
		{
			MethodName: "GetCollectionInfo",
			Handler:    _BsRagService_GetCollectionInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bsrag.proto",
}
