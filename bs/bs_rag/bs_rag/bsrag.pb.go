// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: bsrag.proto

package bs_rag

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 向量查询请求
type VectorSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryText      string            `protobuf:"bytes,1,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`                                                                    // 查询文本（用于自动向量化）
	TopK           int32             `protobuf:"varint,2,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`                                                                                  // 返回最相似的k个结果
	MinScore       float32           `protobuf:"fixed32,3,opt,name=min_score,json=minScore,proto3" json:"min_score,omitempty"`                                                                     // 最小相似度阈值
	CollectionName string            `protobuf:"bytes,4,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`                                                     // 集合名称
	Filters        map[string]string `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 过滤条件
	UserId         string            `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                                             // 用户ID
}

func (x *VectorSearchRequest) Reset() {
	*x = VectorSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bsrag_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorSearchRequest) ProtoMessage() {}

func (x *VectorSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bsrag_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorSearchRequest.ProtoReflect.Descriptor instead.
func (*VectorSearchRequest) Descriptor() ([]byte, []int) {
	return file_bsrag_proto_rawDescGZIP(), []int{0}
}

func (x *VectorSearchRequest) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *VectorSearchRequest) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *VectorSearchRequest) GetMinScore() float32 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *VectorSearchRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *VectorSearchRequest) GetFilters() map[string]string {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *VectorSearchRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 向量搜索结果
type VectorSearchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                     // 文档ID
	Vector   []float32         `protobuf:"fixed32,2,rep,packed,name=vector,proto3" json:"vector,omitempty"`                                                                                    // 向量
	Score    float32           `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`                                                                                             // 相似度分数
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 元数据
	Content  string            `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                                                                                           // 文档内容
}

func (x *VectorSearchResult) Reset() {
	*x = VectorSearchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bsrag_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorSearchResult) ProtoMessage() {}

func (x *VectorSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_bsrag_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorSearchResult.ProtoReflect.Descriptor instead.
func (*VectorSearchResult) Descriptor() ([]byte, []int) {
	return file_bsrag_proto_rawDescGZIP(), []int{1}
}

func (x *VectorSearchResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VectorSearchResult) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *VectorSearchResult) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *VectorSearchResult) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VectorSearchResult) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 向量查询响应
type VectorSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results      []*VectorSearchResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`                                   // 搜索结果列表
	TotalCount   int32                 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`          // 总结果数
	SearchTimeMs float32               `protobuf:"fixed32,3,opt,name=search_time_ms,json=searchTimeMs,proto3" json:"search_time_ms,omitempty"` // 搜索耗时(毫秒)
}

func (x *VectorSearchResponse) Reset() {
	*x = VectorSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bsrag_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorSearchResponse) ProtoMessage() {}

func (x *VectorSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bsrag_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorSearchResponse.ProtoReflect.Descriptor instead.
func (*VectorSearchResponse) Descriptor() ([]byte, []int) {
	return file_bsrag_proto_rawDescGZIP(), []int{2}
}

func (x *VectorSearchResponse) GetResults() []*VectorSearchResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *VectorSearchResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *VectorSearchResponse) GetSearchTimeMs() float32 {
	if x != nil {
		return x.SearchTimeMs
	}
	return 0
}

// 向量插入请求
type VectorInsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string            `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // 集合名称
	Documents      []*VectorDocument `protobuf:"bytes,2,rep,name=documents,proto3" json:"documents,omitempty"`                                 // 要插入的文档列表
	UserId         string            `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                         // 用户ID
}

func (x *VectorInsertRequest) Reset() {
	*x = VectorInsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bsrag_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorInsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorInsertRequest) ProtoMessage() {}

func (x *VectorInsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bsrag_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorInsertRequest.ProtoReflect.Descriptor instead.
func (*VectorInsertRequest) Descriptor() ([]byte, []int) {
	return file_bsrag_proto_rawDescGZIP(), []int{3}
}

func (x *VectorInsertRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *VectorInsertRequest) GetDocuments() []*VectorDocument {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *VectorInsertRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 向量文档
type VectorDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                     // 文档ID
	Text     string            `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`                                                                                                 // 原始文本（用于自动向量化）
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 元数据
	Content  string            `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                                                                                           // 文档内容
}

func (x *VectorDocument) Reset() {
	*x = VectorDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bsrag_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorDocument) ProtoMessage() {}

func (x *VectorDocument) ProtoReflect() protoreflect.Message {
	mi := &file_bsrag_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorDocument.ProtoReflect.Descriptor instead.
func (*VectorDocument) Descriptor() ([]byte, []int) {
	return file_bsrag_proto_rawDescGZIP(), []int{4}
}

func (x *VectorDocument) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VectorDocument) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *VectorDocument) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VectorDocument) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// 向量插入响应
type VectorInsertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsertedCount int32    `protobuf:"varint,1,opt,name=inserted_count,json=insertedCount,proto3" json:"inserted_count,omitempty"` // 成功插入的文档数
	InsertedIds   []string `protobuf:"bytes,2,rep,name=inserted_ids,json=insertedIds,proto3" json:"inserted_ids,omitempty"`        // 插入的文档ID列表
	ErrorMessage  string   `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`     // 错误信息(如果有)
}

func (x *VectorInsertResponse) Reset() {
	*x = VectorInsertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bsrag_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorInsertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorInsertResponse) ProtoMessage() {}

func (x *VectorInsertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bsrag_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorInsertResponse.ProtoReflect.Descriptor instead.
func (*VectorInsertResponse) Descriptor() ([]byte, []int) {
	return file_bsrag_proto_rawDescGZIP(), []int{5}
}

func (x *VectorInsertResponse) GetInsertedCount() int32 {
	if x != nil {
		return x.InsertedCount
	}
	return 0
}

func (x *VectorInsertResponse) GetInsertedIds() []string {
	if x != nil {
		return x.InsertedIds
	}
	return nil
}

func (x *VectorInsertResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 向量删除请求
type VectorDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // 集合名称
	DocumentIds    []string `protobuf:"bytes,2,rep,name=document_ids,json=documentIds,proto3" json:"document_ids,omitempty"`          // 要删除的文档ID列表
	UserId         string   `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                         // 用户ID
}

func (x *VectorDeleteRequest) Reset() {
	*x = VectorDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bsrag_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorDeleteRequest) ProtoMessage() {}

func (x *VectorDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bsrag_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorDeleteRequest.ProtoReflect.Descriptor instead.
func (*VectorDeleteRequest) Descriptor() ([]byte, []int) {
	return file_bsrag_proto_rawDescGZIP(), []int{6}
}

func (x *VectorDeleteRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *VectorDeleteRequest) GetDocumentIds() []string {
	if x != nil {
		return x.DocumentIds
	}
	return nil
}

func (x *VectorDeleteRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 向量删除响应
type VectorDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedCount int32    `protobuf:"varint,1,opt,name=deleted_count,json=deletedCount,proto3" json:"deleted_count,omitempty"` // 成功删除的文档数
	DeletedIds   []string `protobuf:"bytes,2,rep,name=deleted_ids,json=deletedIds,proto3" json:"deleted_ids,omitempty"`        // 删除的文档ID列表
	ErrorMessage string   `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`  // 错误信息(如果有)
}

func (x *VectorDeleteResponse) Reset() {
	*x = VectorDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bsrag_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorDeleteResponse) ProtoMessage() {}

func (x *VectorDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bsrag_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorDeleteResponse.ProtoReflect.Descriptor instead.
func (*VectorDeleteResponse) Descriptor() ([]byte, []int) {
	return file_bsrag_proto_rawDescGZIP(), []int{7}
}

func (x *VectorDeleteResponse) GetDeletedCount() int32 {
	if x != nil {
		return x.DeletedCount
	}
	return 0
}

func (x *VectorDeleteResponse) GetDeletedIds() []string {
	if x != nil {
		return x.DeletedIds
	}
	return nil
}

func (x *VectorDeleteResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 集合信息请求
type CollectionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"` // 集合名称
	UserId         string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                         // 用户ID
}

func (x *CollectionInfoRequest) Reset() {
	*x = CollectionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bsrag_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInfoRequest) ProtoMessage() {}

func (x *CollectionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bsrag_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInfoRequest.ProtoReflect.Descriptor instead.
func (*CollectionInfoRequest) Descriptor() ([]byte, []int) {
	return file_bsrag_proto_rawDescGZIP(), []int{8}
}

func (x *CollectionInfoRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CollectionInfoRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// 集合信息响应
type CollectionInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionName  string `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`     // 集合名称
	DocumentCount   int32  `protobuf:"varint,2,opt,name=document_count,json=documentCount,proto3" json:"document_count,omitempty"`       // 文档数量
	VectorDimension int32  `protobuf:"varint,3,opt,name=vector_dimension,json=vectorDimension,proto3" json:"vector_dimension,omitempty"` // 向量维度
	IndexType       string `protobuf:"bytes,4,opt,name=index_type,json=indexType,proto3" json:"index_type,omitempty"`                    // 索引类型
	Exists          bool   `protobuf:"varint,5,opt,name=exists,proto3" json:"exists,omitempty"`                                          // 集合是否存在
	ErrorMessage    string `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`           // 错误信息(如果有)
}

func (x *CollectionInfoResponse) Reset() {
	*x = CollectionInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bsrag_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectionInfoResponse) ProtoMessage() {}

func (x *CollectionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bsrag_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectionInfoResponse.ProtoReflect.Descriptor instead.
func (*CollectionInfoResponse) Descriptor() ([]byte, []int) {
	return file_bsrag_proto_rawDescGZIP(), []int{9}
}

func (x *CollectionInfoResponse) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CollectionInfoResponse) GetDocumentCount() int32 {
	if x != nil {
		return x.DocumentCount
	}
	return 0
}

func (x *CollectionInfoResponse) GetVectorDimension() int32 {
	if x != nil {
		return x.VectorDimension
	}
	return 0
}

func (x *CollectionInfoResponse) GetIndexType() string {
	if x != nil {
		return x.IndexType
	}
	return ""
}

func (x *CollectionInfoResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *CollectionInfoResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// 向量化文本请求
type VectorizeTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"` // 要向量化的文本
}

func (x *VectorizeTextRequest) Reset() {
	*x = VectorizeTextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bsrag_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorizeTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorizeTextRequest) ProtoMessage() {}

func (x *VectorizeTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bsrag_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorizeTextRequest.ProtoReflect.Descriptor instead.
func (*VectorizeTextRequest) Descriptor() ([]byte, []int) {
	return file_bsrag_proto_rawDescGZIP(), []int{10}
}

func (x *VectorizeTextRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// 向量化文本响应
type VectorizeTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vector       []float32 `protobuf:"fixed32,1,rep,packed,name=vector,proto3" json:"vector,omitempty"`                        // 生成的向量
	ErrorMessage string    `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // 错误信息(如果有)
}

func (x *VectorizeTextResponse) Reset() {
	*x = VectorizeTextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bsrag_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorizeTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorizeTextResponse) ProtoMessage() {}

func (x *VectorizeTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bsrag_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorizeTextResponse.ProtoReflect.Descriptor instead.
func (*VectorizeTextResponse) Descriptor() ([]byte, []int) {
	return file_bsrag_proto_rawDescGZIP(), []int{11}
}

func (x *VectorizeTextResponse) GetVector() []float32 {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *VectorizeTextResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_bsrag_proto protoreflect.FileDescriptor

var file_bsrag_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x62, 0x73, 0x72, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x62,
	0x73, 0x5f, 0x72, 0x61, 0x67, 0x22, 0xa8, 0x02, 0x0a, 0x13, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x5f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70,
	0x4b, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x73, 0x5f, 0x72, 0x61,
	0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xef, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x73, 0x5f, 0x72, 0x61, 0x67,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x73, 0x5f, 0x72, 0x61, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x73, 0x5f, 0x72, 0x61, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x73, 0x5f, 0x72, 0x61, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x7a, 0x0a, 0x13, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a,
	0x14, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x59, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xef, 0x01, 0x0a, 0x16,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2a, 0x0a,
	0x14, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x54, 0x0a, 0x15, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0x91, 0x03, 0x0a, 0x0c, 0x42, 0x73, 0x52, 0x61, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x49, 0x0a, 0x0c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x1b, 0x2e, 0x62, 0x73, 0x5f, 0x72, 0x61, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x62, 0x73, 0x5f, 0x72, 0x61, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x62, 0x73,
	0x5f, 0x72, 0x61, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x73, 0x5f, 0x72, 0x61,
	0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x62, 0x73, 0x5f, 0x72, 0x61, 0x67, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x73, 0x5f, 0x72, 0x61, 0x67, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x62, 0x73, 0x5f, 0x72, 0x61, 0x67, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x73, 0x5f, 0x72, 0x61, 0x67, 0x2e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x2e, 0x62, 0x73, 0x5f, 0x72, 0x61, 0x67, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x73, 0x5f, 0x72, 0x61, 0x67, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x62, 0x73, 0x5f, 0x72, 0x61, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bsrag_proto_rawDescOnce sync.Once
	file_bsrag_proto_rawDescData = file_bsrag_proto_rawDesc
)

func file_bsrag_proto_rawDescGZIP() []byte {
	file_bsrag_proto_rawDescOnce.Do(func() {
		file_bsrag_proto_rawDescData = protoimpl.X.CompressGZIP(file_bsrag_proto_rawDescData)
	})
	return file_bsrag_proto_rawDescData
}

var file_bsrag_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_bsrag_proto_goTypes = []interface{}{
	(*VectorSearchRequest)(nil),    // 0: bs_rag.VectorSearchRequest
	(*VectorSearchResult)(nil),     // 1: bs_rag.VectorSearchResult
	(*VectorSearchResponse)(nil),   // 2: bs_rag.VectorSearchResponse
	(*VectorInsertRequest)(nil),    // 3: bs_rag.VectorInsertRequest
	(*VectorDocument)(nil),         // 4: bs_rag.VectorDocument
	(*VectorInsertResponse)(nil),   // 5: bs_rag.VectorInsertResponse
	(*VectorDeleteRequest)(nil),    // 6: bs_rag.VectorDeleteRequest
	(*VectorDeleteResponse)(nil),   // 7: bs_rag.VectorDeleteResponse
	(*CollectionInfoRequest)(nil),  // 8: bs_rag.CollectionInfoRequest
	(*CollectionInfoResponse)(nil), // 9: bs_rag.CollectionInfoResponse
	(*VectorizeTextRequest)(nil),   // 10: bs_rag.VectorizeTextRequest
	(*VectorizeTextResponse)(nil),  // 11: bs_rag.VectorizeTextResponse
	nil,                            // 12: bs_rag.VectorSearchRequest.FiltersEntry
	nil,                            // 13: bs_rag.VectorSearchResult.MetadataEntry
	nil,                            // 14: bs_rag.VectorDocument.MetadataEntry
}
var file_bsrag_proto_depIdxs = []int32{
	12, // 0: bs_rag.VectorSearchRequest.filters:type_name -> bs_rag.VectorSearchRequest.FiltersEntry
	13, // 1: bs_rag.VectorSearchResult.metadata:type_name -> bs_rag.VectorSearchResult.MetadataEntry
	1,  // 2: bs_rag.VectorSearchResponse.results:type_name -> bs_rag.VectorSearchResult
	4,  // 3: bs_rag.VectorInsertRequest.documents:type_name -> bs_rag.VectorDocument
	14, // 4: bs_rag.VectorDocument.metadata:type_name -> bs_rag.VectorDocument.MetadataEntry
	0,  // 5: bs_rag.BsRagService.VectorSearch:input_type -> bs_rag.VectorSearchRequest
	3,  // 6: bs_rag.BsRagService.VectorInsert:input_type -> bs_rag.VectorInsertRequest
	6,  // 7: bs_rag.BsRagService.VectorDelete:input_type -> bs_rag.VectorDeleteRequest
	8,  // 8: bs_rag.BsRagService.GetCollectionInfo:input_type -> bs_rag.CollectionInfoRequest
	10, // 9: bs_rag.BsRagService.VectorizeText:input_type -> bs_rag.VectorizeTextRequest
	2,  // 10: bs_rag.BsRagService.VectorSearch:output_type -> bs_rag.VectorSearchResponse
	5,  // 11: bs_rag.BsRagService.VectorInsert:output_type -> bs_rag.VectorInsertResponse
	7,  // 12: bs_rag.BsRagService.VectorDelete:output_type -> bs_rag.VectorDeleteResponse
	9,  // 13: bs_rag.BsRagService.GetCollectionInfo:output_type -> bs_rag.CollectionInfoResponse
	11, // 14: bs_rag.BsRagService.VectorizeText:output_type -> bs_rag.VectorizeTextResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_bsrag_proto_init() }
func file_bsrag_proto_init() {
	if File_bsrag_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bsrag_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bsrag_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorSearchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bsrag_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bsrag_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorInsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bsrag_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bsrag_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorInsertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bsrag_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bsrag_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bsrag_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bsrag_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectionInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bsrag_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorizeTextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bsrag_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorizeTextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bsrag_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bsrag_proto_goTypes,
		DependencyIndexes: file_bsrag_proto_depIdxs,
		MessageInfos:      file_bsrag_proto_msgTypes,
	}.Build()
	File_bsrag_proto = out.File
	file_bsrag_proto_rawDesc = nil
	file_bsrag_proto_goTypes = nil
	file_bsrag_proto_depIdxs = nil
}
