// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bll_knowledge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BllKnowledgeServiceClient is the client API for BllKnowledgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BllKnowledgeServiceClient interface {
	// 添加知识库到向量数据库
	AddVectorKnowledge(ctx context.Context, in *AddVectorKnowledgeRequest, opts ...grpc.CallOption) (*AddVectorKnowledgeResponse, error)
	// 从向量数据库删除知识库
	DeleteVectorKnowledge(ctx context.Context, in *DeleteVectorKnowledgeRequest, opts ...grpc.CallOption) (*DeleteVectorKnowledgeResponse, error)
}

type bllKnowledgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBllKnowledgeServiceClient(cc grpc.ClientConnInterface) BllKnowledgeServiceClient {
	return &bllKnowledgeServiceClient{cc}
}

func (c *bllKnowledgeServiceClient) AddVectorKnowledge(ctx context.Context, in *AddVectorKnowledgeRequest, opts ...grpc.CallOption) (*AddVectorKnowledgeResponse, error) {
	out := new(AddVectorKnowledgeResponse)
	err := c.cc.Invoke(ctx, "/bll_knowledge.BllKnowledgeService/AddVectorKnowledge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bllKnowledgeServiceClient) DeleteVectorKnowledge(ctx context.Context, in *DeleteVectorKnowledgeRequest, opts ...grpc.CallOption) (*DeleteVectorKnowledgeResponse, error) {
	out := new(DeleteVectorKnowledgeResponse)
	err := c.cc.Invoke(ctx, "/bll_knowledge.BllKnowledgeService/DeleteVectorKnowledge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BllKnowledgeServiceServer is the server API for BllKnowledgeService service.
// All implementations must embed UnimplementedBllKnowledgeServiceServer
// for forward compatibility
type BllKnowledgeServiceServer interface {
	// 添加知识库到向量数据库
	AddVectorKnowledge(context.Context, *AddVectorKnowledgeRequest) (*AddVectorKnowledgeResponse, error)
	// 从向量数据库删除知识库
	DeleteVectorKnowledge(context.Context, *DeleteVectorKnowledgeRequest) (*DeleteVectorKnowledgeResponse, error)
	mustEmbedUnimplementedBllKnowledgeServiceServer()
}

// UnimplementedBllKnowledgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBllKnowledgeServiceServer struct {
}

func (UnimplementedBllKnowledgeServiceServer) AddVectorKnowledge(context.Context, *AddVectorKnowledgeRequest) (*AddVectorKnowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVectorKnowledge not implemented")
}
func (UnimplementedBllKnowledgeServiceServer) DeleteVectorKnowledge(context.Context, *DeleteVectorKnowledgeRequest) (*DeleteVectorKnowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVectorKnowledge not implemented")
}
func (UnimplementedBllKnowledgeServiceServer) mustEmbedUnimplementedBllKnowledgeServiceServer() {}

// UnsafeBllKnowledgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BllKnowledgeServiceServer will
// result in compilation errors.
type UnsafeBllKnowledgeServiceServer interface {
	mustEmbedUnimplementedBllKnowledgeServiceServer()
}

func RegisterBllKnowledgeServiceServer(s grpc.ServiceRegistrar, srv BllKnowledgeServiceServer) {
	s.RegisterService(&BllKnowledgeService_ServiceDesc, srv)
}

func _BllKnowledgeService_AddVectorKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVectorKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BllKnowledgeServiceServer).AddVectorKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bll_knowledge.BllKnowledgeService/AddVectorKnowledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BllKnowledgeServiceServer).AddVectorKnowledge(ctx, req.(*AddVectorKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BllKnowledgeService_DeleteVectorKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVectorKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BllKnowledgeServiceServer).DeleteVectorKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bll_knowledge.BllKnowledgeService/DeleteVectorKnowledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BllKnowledgeServiceServer).DeleteVectorKnowledge(ctx, req.(*DeleteVectorKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BllKnowledgeService_ServiceDesc is the grpc.ServiceDesc for BllKnowledgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BllKnowledgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bll_knowledge.BllKnowledgeService",
	HandlerType: (*BllKnowledgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVectorKnowledge",
			Handler:    _BllKnowledgeService_AddVectorKnowledge_Handler,
		},
		{
			MethodName: "DeleteVectorKnowledge",
			Handler:    _BllKnowledgeService_DeleteVectorKnowledge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bllknowledge.proto",
}
