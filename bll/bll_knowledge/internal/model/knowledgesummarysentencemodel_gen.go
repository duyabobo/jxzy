// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	knowledgeSummarySentenceFieldNames          = builder.RawFieldNames(&KnowledgeSummarySentence{})
	knowledgeSummarySentenceRows                = strings.Join(knowledgeSummarySentenceFieldNames, ",")
	knowledgeSummarySentenceRowsExpectAutoSet   = strings.Join(stringx.Remove(knowledgeSummarySentenceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	knowledgeSummarySentenceRowsWithPlaceHolder = strings.Join(stringx.Remove(knowledgeSummarySentenceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheKnowledgeSummarySentenceIdPrefix = "cache:knowledgeSummarySentence:id:"
)

type (
	knowledgeSummarySentenceModel interface {
		Insert(ctx context.Context, data *KnowledgeSummarySentence) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*KnowledgeSummarySentence, error)
		Update(ctx context.Context, data *KnowledgeSummarySentence) error
		Delete(ctx context.Context, id int64) error
	}

	defaultKnowledgeSummarySentenceModel struct {
		sqlc.CachedConn
		table string
	}

	KnowledgeSummarySentence struct {
		Id                  int64     `db:"id"`                    // 记录ID
		KnowledgeFileId     int64     `db:"knowledge_file_id"`     // 关联的知识文件ID，对应knowledge_file表
		KnowledgeSegmentId  int64     `db:"knowledge_segment_id"`  // 关联的语义段ID，对应knowledge_segment表
		SummarySentenceText string    `db:"summary_sentence_text"` // 摘要句文本
		SummarySentenceMd5  string    `db:"summary_sentence_md5"`  // 摘要句MD5
		CreatedAt           time.Time `db:"created_at"`            // 创建时间
	}
)

func newKnowledgeSummarySentenceModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultKnowledgeSummarySentenceModel {
	return &defaultKnowledgeSummarySentenceModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`knowledge_summary_sentence`",
	}
}

func (m *defaultKnowledgeSummarySentenceModel) Delete(ctx context.Context, id int64) error {
	knowledgeSummarySentenceIdKey := fmt.Sprintf("%s%v", cacheKnowledgeSummarySentenceIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, knowledgeSummarySentenceIdKey)
	return err
}

func (m *defaultKnowledgeSummarySentenceModel) FindOne(ctx context.Context, id int64) (*KnowledgeSummarySentence, error) {
	knowledgeSummarySentenceIdKey := fmt.Sprintf("%s%v", cacheKnowledgeSummarySentenceIdPrefix, id)
	var resp KnowledgeSummarySentence
	err := m.QueryRowCtx(ctx, &resp, knowledgeSummarySentenceIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", knowledgeSummarySentenceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultKnowledgeSummarySentenceModel) Insert(ctx context.Context, data *KnowledgeSummarySentence) (sql.Result, error) {
	knowledgeSummarySentenceIdKey := fmt.Sprintf("%s%v", cacheKnowledgeSummarySentenceIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, knowledgeSummarySentenceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.KnowledgeFileId, data.KnowledgeSegmentId, data.SummarySentenceText, data.SummarySentenceMd5)
	}, knowledgeSummarySentenceIdKey)
	return ret, err
}

func (m *defaultKnowledgeSummarySentenceModel) Update(ctx context.Context, data *KnowledgeSummarySentence) error {
	knowledgeSummarySentenceIdKey := fmt.Sprintf("%s%v", cacheKnowledgeSummarySentenceIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, knowledgeSummarySentenceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.KnowledgeFileId, data.KnowledgeSegmentId, data.SummarySentenceText, data.SummarySentenceMd5, data.Id)
	}, knowledgeSummarySentenceIdKey)
	return err
}

func (m *defaultKnowledgeSummarySentenceModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheKnowledgeSummarySentenceIdPrefix, primary)
}

func (m *defaultKnowledgeSummarySentenceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", knowledgeSummarySentenceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultKnowledgeSummarySentenceModel) tableName() string {
	return m.table
}
