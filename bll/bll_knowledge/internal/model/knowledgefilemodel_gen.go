// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	knowledgeFileFieldNames          = builder.RawFieldNames(&KnowledgeFile{})
	knowledgeFileRows                = strings.Join(knowledgeFileFieldNames, ",")
	knowledgeFileRowsExpectAutoSet   = strings.Join(stringx.Remove(knowledgeFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	knowledgeFileRowsWithPlaceHolder = strings.Join(stringx.Remove(knowledgeFileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
    knowledgeFileModel interface {
		Insert(ctx context.Context, data *KnowledgeFile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*KnowledgeFile, error)
        FindOneByMd5(ctx context.Context, fileMd5 string) (*KnowledgeFile, error)
		Update(ctx context.Context, data *KnowledgeFile) error
		Delete(ctx context.Context, id int64) error
	}

	defaultKnowledgeFileModel struct {
		conn  sqlx.SqlConn
		table string
	}

	KnowledgeFile struct {
		Id        int64     `db:"id"`         // 记录ID
		OssPath   string    `db:"oss_path"`   // OSS路径
		FileName  string    `db:"file_name"`  // 文件名称
		FileSize  int64     `db:"file_size"`  // 文件大小，单位bytes
		FileType  string    `db:"file_type"`  // 文件类型
		FileMd5   string    `db:"file_md5"`   // 文件MD5
		CreatedAt time.Time `db:"created_at"` // 创建时间
	}
)

func newKnowledgeFileModel(conn sqlx.SqlConn) *defaultKnowledgeFileModel {
	return &defaultKnowledgeFileModel{
		conn:  conn,
		table: "`knowledge_file`",
	}
}

func (m *defaultKnowledgeFileModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultKnowledgeFileModel) FindOne(ctx context.Context, id int64) (*KnowledgeFile, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", knowledgeFileRows, m.table)
	var resp KnowledgeFile
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultKnowledgeFileModel) FindOneByMd5(ctx context.Context, fileMd5 string) (*KnowledgeFile, error) {
    query := fmt.Sprintf("select %s from %s where `file_md5` = ? limit 1", knowledgeFileRows, m.table)
    var resp KnowledgeFile
    err := m.conn.QueryRowCtx(ctx, &resp, query, fileMd5)
    switch err {
    case nil:
        return &resp, nil
    case sqlc.ErrNotFound:
        return nil, ErrNotFound
    default:
        return nil, err
    }
}

func (m *defaultKnowledgeFileModel) Insert(ctx context.Context, data *KnowledgeFile) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, knowledgeFileRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OssPath, data.FileName, data.FileSize, data.FileType, data.FileMd5)
	return ret, err
}

func (m *defaultKnowledgeFileModel) Update(ctx context.Context, data *KnowledgeFile) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, knowledgeFileRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OssPath, data.FileName, data.FileSize, data.FileType, data.FileMd5, data.Id)
	return err
}

func (m *defaultKnowledgeFileModel) tableName() string {
	return m.table
}
