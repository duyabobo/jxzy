// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	knowledgeSegmentFieldNames          = builder.RawFieldNames(&KnowledgeSegment{})
	knowledgeSegmentRows                = strings.Join(knowledgeSegmentFieldNames, ",")
	knowledgeSegmentRowsExpectAutoSet   = strings.Join(stringx.Remove(knowledgeSegmentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	knowledgeSegmentRowsWithPlaceHolder = strings.Join(stringx.Remove(knowledgeSegmentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	knowledgeSegmentModel interface {
		Insert(ctx context.Context, data *KnowledgeSegment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*KnowledgeSegment, error)
		Update(ctx context.Context, data *KnowledgeSegment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultKnowledgeSegmentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	KnowledgeSegment struct {
		Id              int64     `db:"id"`                // 记录ID
		KnowledgeFileId int64     `db:"knowledge_file_id"` // 关联的知识文件ID，对应knowledge_file表
		SegmentText     string    `db:"segment_text"`      // 语义段文本
		SegmentMd5      string    `db:"segment_md5"`       // 语义段MD5
		CreatedAt       time.Time `db:"created_at"`        // 创建时间
	}
)

func newKnowledgeSegmentModel(conn sqlx.SqlConn) *defaultKnowledgeSegmentModel {
	return &defaultKnowledgeSegmentModel{
		conn:  conn,
		table: "`knowledge_segment`",
	}
}

func (m *defaultKnowledgeSegmentModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultKnowledgeSegmentModel) FindOne(ctx context.Context, id int64) (*KnowledgeSegment, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", knowledgeSegmentRows, m.table)
	var resp KnowledgeSegment
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultKnowledgeSegmentModel) Insert(ctx context.Context, data *KnowledgeSegment) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, knowledgeSegmentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.KnowledgeFileId, data.SegmentText, data.SegmentMd5)
	return ret, err
}

func (m *defaultKnowledgeSegmentModel) Update(ctx context.Context, data *KnowledgeSegment) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, knowledgeSegmentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.KnowledgeFileId, data.SegmentText, data.SegmentMd5, data.Id)
	return err
}

func (m *defaultKnowledgeSegmentModel) tableName() string {
	return m.table
}
