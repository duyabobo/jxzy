// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	chatSessionQasFieldNames          = builder.RawFieldNames(&ChatSessionQas{})
	chatSessionQasRows                = strings.Join(chatSessionQasFieldNames, ",")
	chatSessionQasRowsExpectAutoSet   = strings.Join(stringx.Remove(chatSessionQasFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	chatSessionQasRowsWithPlaceHolder = strings.Join(stringx.Remove(chatSessionQasFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	chatSessionQasModel interface {
		Insert(ctx context.Context, data *ChatSessionQas) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ChatSessionQas, error)
		FindOneBySessionIdLlmCompletionId(ctx context.Context, sessionId int64, llmCompletionId int64) (*ChatSessionQas, error)
		Update(ctx context.Context, data *ChatSessionQas) error
		Delete(ctx context.Context, id int64) error
	}

	defaultChatSessionQasModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ChatSessionQas struct {
		Id              int64     `db:"id"`
		SessionId       int64     `db:"session_id"`
		LlmCompletionId int64     `db:"llm_completion_id"`
		SequenceNum     int64     `db:"sequence_num"`
		CreatedAt       time.Time `db:"created_at"`
	}
)

func newChatSessionQasModel(conn sqlx.SqlConn) *defaultChatSessionQasModel {
	return &defaultChatSessionQasModel{
		conn:  conn,
		table: "`chat_session_qas`",
	}
}

func (m *defaultChatSessionQasModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultChatSessionQasModel) FindOne(ctx context.Context, id int64) (*ChatSessionQas, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", chatSessionQasRows, m.table)
	var resp ChatSessionQas
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatSessionQasModel) FindOneBySessionIdLlmCompletionId(ctx context.Context, sessionId int64, llmCompletionId int64) (*ChatSessionQas, error) {
	var resp ChatSessionQas
	query := fmt.Sprintf("select %s from %s where `session_id` = ? and `llm_completion_id` = ? limit 1", chatSessionQasRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, sessionId, llmCompletionId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatSessionQasModel) Insert(ctx context.Context, data *ChatSessionQas) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, chatSessionQasRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SessionId, data.LlmCompletionId, data.SequenceNum)
	return ret, err
}

func (m *defaultChatSessionQasModel) Update(ctx context.Context, newData *ChatSessionQas) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, chatSessionQasRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.SessionId, newData.LlmCompletionId, newData.SequenceNum, newData.Id)
	return err
}

func (m *defaultChatSessionQasModel) tableName() string {
	return m.table
}
