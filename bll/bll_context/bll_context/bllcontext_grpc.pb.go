// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bll_context

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BllContextServiceClient is the client API for BllContextService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BllContextServiceClient interface {
	// 流式聊天接口
	StreamChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (BllContextService_StreamChatClient, error)
}

type bllContextServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBllContextServiceClient(cc grpc.ClientConnInterface) BllContextServiceClient {
	return &bllContextServiceClient{cc}
}

func (c *bllContextServiceClient) StreamChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (BllContextService_StreamChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &BllContextService_ServiceDesc.Streams[0], "/bll_context.BllContextService/StreamChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &bllContextServiceStreamChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BllContextService_StreamChatClient interface {
	Recv() (*StreamChatResponse, error)
	grpc.ClientStream
}

type bllContextServiceStreamChatClient struct {
	grpc.ClientStream
}

func (x *bllContextServiceStreamChatClient) Recv() (*StreamChatResponse, error) {
	m := new(StreamChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BllContextServiceServer is the server API for BllContextService service.
// All implementations must embed UnimplementedBllContextServiceServer
// for forward compatibility
type BllContextServiceServer interface {
	// 流式聊天接口
	StreamChat(*ChatRequest, BllContextService_StreamChatServer) error
	mustEmbedUnimplementedBllContextServiceServer()
}

// UnimplementedBllContextServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBllContextServiceServer struct {
}

func (UnimplementedBllContextServiceServer) StreamChat(*ChatRequest, BllContextService_StreamChatServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChat not implemented")
}
func (UnimplementedBllContextServiceServer) mustEmbedUnimplementedBllContextServiceServer() {}

// UnsafeBllContextServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BllContextServiceServer will
// result in compilation errors.
type UnsafeBllContextServiceServer interface {
	mustEmbedUnimplementedBllContextServiceServer()
}

func RegisterBllContextServiceServer(s grpc.ServiceRegistrar, srv BllContextServiceServer) {
	s.RegisterService(&BllContextService_ServiceDesc, srv)
}

func _BllContextService_StreamChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BllContextServiceServer).StreamChat(m, &bllContextServiceStreamChatServer{stream})
}

type BllContextService_StreamChatServer interface {
	Send(*StreamChatResponse) error
	grpc.ServerStream
}

type bllContextServiceStreamChatServer struct {
	grpc.ServerStream
}

func (x *bllContextServiceStreamChatServer) Send(m *StreamChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BllContextService_ServiceDesc is the grpc.ServiceDesc for BllContextService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BllContextService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bll_context.BllContextService",
	HandlerType: (*BllContextServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChat",
			Handler:       _BllContextService_StreamChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bllcontext.proto",
}
